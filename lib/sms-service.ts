// Service g·ª≠i SMS v·ªõi m√£ x√°c th·ª±c
export class SMSService {
  // T·∫°o m√£ 6 s·ªë ng·∫´u nhi√™n
  static generateCode(): string {
    return Math.floor(100000 + Math.random() * 900000).toString()
  }

  // Chu·∫©n h√≥a s·ªë ƒëi·ªán tho·∫°i v·ªÅ ƒë·ªãnh d·∫°ng E.164 (m·∫∑c ƒë·ªãnh VN n·∫øu b·∫Øt ƒë·∫ßu b·∫±ng 0)
  static normalizePhone(rawPhone: string): string {
    if (!rawPhone) return rawPhone
    // Lo·∫°i b·ªè kho·∫£ng tr·∫Øng, d·∫•u g·∫°ch
    let phone = rawPhone.replace(/\s|-/g, "")
    // N·∫øu ƒë√£ c√≥ +, gi·ªØ nguy√™n (nh∆∞ng v·∫´n b·ªè kho·∫£ng tr·∫Øng ·ªü tr√™n)
    if (phone.startsWith("+")) return phone
    // N·∫øu b·∫Øt ƒë·∫ßu b·∫±ng 00 (ƒë·ªãnh d·∫°ng qu·ªëc t·∫ø), ƒë·ªïi 00 -> +
    if (phone.startsWith("00")) return "+" + phone.slice(2)
    // N·∫øu b·∫Øt ƒë·∫ßu b·∫±ng 0, gi·∫£ ƒë·ªãnh l√† s·ªë VN -> +84
    if (phone.startsWith("0")) return "+84" + phone.slice(1)
    // N·∫øu kh√¥ng c√≥ + v√† kh√¥ng b·∫Øt ƒë·∫ßu b·∫±ng 0, ƒë·ªÉ nguy√™n (c√≥ th·ªÉ s·ªë qu·ªëc t·∫ø thi·∫øu +)
    return phone
  }

  // G·ª≠i SMS th·ª±c t·∫ø qua Twilio (c·∫ßn c·∫•u h√¨nh)
  static async sendSMSReal(phone: string, message: string): Promise<boolean> {
    try {
      // Ki·ªÉm tra xem c√≥ c·∫•u h√¨nh Twilio kh√¥ng
      const twilioConfig = {
        // ∆Øu ti√™n bi·∫øn m√¥i tr∆∞·ªùng server an to√†n
        accountSid: process.env.TWILIO_ACCOUNT_SID || process.env.NEXT_PUBLIC_TWILIO_ACCOUNT_SID,
        authToken: process.env.TWILIO_AUTH_TOKEN || process.env.NEXT_PUBLIC_TWILIO_AUTH_TOKEN,
        fromNumber: process.env.TWILIO_FROM_NUMBER || process.env.NEXT_PUBLIC_TWILIO_FROM_NUMBER,
      }

      if (!twilioConfig.accountSid || !twilioConfig.authToken || !twilioConfig.fromNumber) {
        console.warn("‚ö†Ô∏è Twilio ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh. S·ª≠ d·ª•ng ch·∫ø ƒë·ªô gi·∫£ l·∫≠p.")
        return this.sendSMSSimulation(phone, message)
      }

      // G·ª≠i SMS th·ª±c t·∫ø qua Twilio
      console.log("[SMS] Using Twilio (server) configuration to send real SMS")
      const response = await fetch('/api/send-sms', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          to: this.normalizePhone(phone),
          message: message
        })
      })

      if (response.ok) {
        console.log(`‚úÖ SMS ƒë√£ g·ª≠i th√†nh c√¥ng ƒë·∫øn ${phone}`)
        return true
      } else {
        console.error("‚ùå L·ªói g·ª≠i SMS:", await response.text())
        return false
      }
    } catch (error) {
      console.error("L·ªói g·ª≠i SMS (fallback sang gi·∫£ l·∫≠p):", error)
      return this.sendSMSSimulation(phone, message)
    }
  }

  // G·ª≠i SMS gi·∫£ l·∫≠p (fallback)
  static async sendSMSSimulation(phone: string, message: string): Promise<boolean> {
    console.log(`üì± [SIMULATION] G·ª≠i SMS ƒë·∫øn ${phone}:`)
    console.log(`üìù N·ªôi dung: ${message}`)
    
    // Simulate delay
    await new Promise(resolve => setTimeout(resolve, 1000))
    
    return true
  }

  // G·ª≠i SMS cho ng∆∞·ªùi nh·∫≠n
  static async sendPickupCode(
    receiverPhone: string,
    receiverName: string,
    senderName: string,
    code: string,
    orderCode?: string,
    isShipper: boolean = false
  ): Promise<boolean> {
    try {
      // T·∫°o n·ªôi dung tin nh·∫Øn
      let message = `Xin ch√†o ${receiverName}, b·∫°n c√≥ m·ªôt ƒë∆°n h√†ng t·ª´ ${senderName}. Vui l√≤ng ƒë·∫øn t·ªß ƒë·ªÉ l·∫•y h√†ng v·ªõi m√£ s·ªë ${code}!`
      
      if (isShipper && orderCode) {
        message += ` M√£ ƒë∆°n h√†ng: ${orderCode}`
      }

      // G·ª≠i SMS (th·ª±c t·∫ø ho·∫∑c gi·∫£ l·∫≠p)
      return await this.sendSMSReal(this.normalizePhone(receiverPhone), message)
    } catch (error) {
      console.error("L·ªói g·ª≠i SMS:", error)
      return false
    }
  }

  // G·ª≠i SMS th√¥ng b√°o ƒë√£ l·∫•y h√†ng
  static async sendPickupConfirmation(
    senderPhone: string,
    senderName: string,
    receiverName: string
  ): Promise<boolean> {
    try {
      const message = `Xin ch√†o ${senderName}, ${receiverName} ƒë√£ l·∫•y h√†ng th√†nh c√¥ng t·ª´ t·ªß th√¥ng minh.`
      
      return await this.sendSMSReal(senderPhone, message)
    } catch (error) {
      console.error("L·ªói g·ª≠i SMS x√°c nh·∫≠n:", error)
      return false
    }
  }
}
