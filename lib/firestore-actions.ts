
import { db } from "@/lib/firebase";
import { collection, addDoc, getDocs, query, where, orderBy, doc, updateDoc, deleteDoc, setDoc, getDoc, writeBatch } from "firebase/firestore";
import type { User, Order, ErrorReport, Notification, Locker } from "@/lib/types";

// L∆∞u th√¥ng tin t√†i kho·∫£n ng∆∞·ªùi d√πng
export async function saveUser(user: User) {
  return await addDoc(collection(db, "users"), user);
}

// L∆∞u l·ªãch s·ª≠ giao d·ªãch (Order)
export async function saveTransaction(order: Omit<Order, "id">): Promise<string> {
  const docRef = await addDoc(collection(db, "transactions"), order);
  return docRef.id;
}

// L∆∞u b√°o l·ªói/feedback
export async function saveError(error: Omit<ErrorReport, "id">) {
  return await addDoc(collection(db, "errors"), error);
}

// L∆∞u log h·ªá th·ªëng
export async function saveLog(log: Record<string, any>) {
  return await addDoc(collection(db, "logs"), log);
}

// L∆∞u c·∫•u h√¨nh h·ªá th·ªëng
export async function saveSetting(setting: Record<string, any>) {
  return await addDoc(collection(db, "settings"), setting);
}

// L∆∞u th√¥ng tin t·ªß th√¥ng minh
export async function saveLocker(locker: Locker) {
  // Normalize locker number and enforce uniqueness at the database level
  const normalizedNumber = typeof locker.lockerNumber === "string" ? locker.lockerNumber.trim().toUpperCase() : locker.lockerNumber

  // Check existing lockers with same number (handles legacy docs where id != lockerNumber)
  const dupQuery = query(collection(db, "lockers"), where("lockerNumber", "==", normalizedNumber))
  const dupSnap = await getDocs(dupQuery)
  if (!dupSnap.empty) {
    throw new Error(`S·ªë t·ªß "${normalizedNumber}" ƒë√£ t·ªìn t·∫°i`)
  }

  const payload: Locker = {
    ...locker,
    lockerNumber: normalizedNumber,
    lastUpdated: new Date(),
  } as Locker

  // Use lockerNumber as document ID to prevent future duplicates created concurrently
  await setDoc(doc(db, "lockers", String(normalizedNumber)), payload)
  return { id: String(normalizedNumber) }
}

// L∆∞u th√¥ng b√°o h·ªá th·ªëng
export async function saveNotification(notification: Omit<Notification, "id">) {
  return await addDoc(collection(db, "notifications"), notification);
}

// T·∫°o th√¥ng b√°o ƒëƒÉng xu·∫•t
export async function createLogoutNotification(user: { id: string; name: string; email: string; role: string }) {
  const notification = {
    type: "info" as const,
    message: `Ng∆∞·ªùi d√πng ${user.name} (${user.email}) - ${user.role === 'admin' ? 'Qu·∫£n tr·ªã vi√™n' : 'Kh√°ch h√†ng'} ƒë√£ ƒëƒÉng xu·∫•t kh·ªèi h·ªá th·ªëng`,
    // Kh√¥ng c√≥ customerId ƒë·ªÉ admin c√≥ th·ªÉ th·∫•y
    isRead: false,
    createdAt: new Date(),
  };
  return await saveNotification(notification);
}

// T·∫°o th√¥ng b√°o c·∫≠p nh·∫≠t profile
export async function createProfileUpdateNotification(user: { id: string; name: string; email: string; role: string }, changes: string[]) {
  const notification = {
    type: "customer_action" as const,
    message: `Ng∆∞·ªùi d√πng ${user.name} (${user.email}) - ${user.role === 'admin' ? 'Qu·∫£n tr·ªã vi√™n' : 'Kh√°ch h√†ng'} ƒë√£ c·∫≠p nh·∫≠t th√¥ng tin: ${changes.join(', ')}`,
    // Kh√¥ng c√≥ customerId ƒë·ªÉ admin c√≥ th·ªÉ th·∫•y
    isRead: false,
    createdAt: new Date(),
  };
  return await saveNotification(notification);
}

// S·ª≠a l·∫°i th√¥ng b√°o c≈© ƒë·ªÉ admin c√≥ th·ªÉ th·∫•y
export async function fixLegacyNotifications() {
  try {
    const notificationsQuery = query(collection(db, "notifications"))
    const querySnapshot = await getDocs(notificationsQuery)
    
    const updatePromises = querySnapshot.docs.map(async (docSnap) => {
      const data = docSnap.data()
      // N·∫øu th√¥ng b√°o c√≥ customerId nh∆∞ng l√† th√¥ng b√°o h·ªá th·ªëng d√†nh cho admin
      // L∆ØU √ù: KH√îNG ƒë·ª•ng v√†o c√°c th√¥ng b√°o d√†nh ri√™ng cho kh√°ch h√†ng nh∆∞
      // "B·∫°n ƒë√£ g·ª≠i h√†ng th√†nh c√¥ng ..." ƒë·ªÉ tr√°nh hi·ªÉn th·ªã ·ªü trang admin.
      const msg: string = String(data.message || "")
      const isCustomerOnly = msg.startsWith("B·∫°n ƒë√£ g·ª≠i h√†ng") || msg.startsWith("B·∫°n ƒë√£ gi·ªØ h√†ng")

      if (data.customerId && !isCustomerOnly && (
        msg.includes("b√°o l·ªói") || 
        msg.includes("gi·ªØ h√†ng") ||
        msg.includes("ƒëƒÉng xu·∫•t") ||
        msg.includes("c·∫≠p nh·∫≠t th√¥ng tin")
      )) {
        const notificationRef = doc(db, "notifications", docSnap.id)
        await updateDoc(notificationRef, {
          customerId: null, // X√≥a customerId ƒë·ªÉ admin c√≥ th·ªÉ th·∫•y
          lastUpdated: new Date()
        })
        console.log(`‚úÖ ƒê√£ s·ª≠a th√¥ng b√°o: ${docSnap.id}`)
      }
    })
    
    await Promise.all(updatePromises)
    console.log("‚úÖ ƒê√£ s·ª≠a xong th√¥ng b√°o c≈©")
  } catch (error) {
    console.error("L·ªói s·ª≠a th√¥ng b√°o c≈©:", error)
  }
}

// Kh√¥i ph·ª•c c√°c th√¥ng b√°o g·ª≠i-h√†ng c·ªßa kh√°ch (n·∫øu l·ª° b·ªã migrate sai tr∆∞·ªõc ƒë√≥)
export async function restoreCustomerDeliveryNotifications() {
  try {
    const notificationsQuery = query(collection(db, "notifications"))
    const querySnapshot = await getDocs(notificationsQuery)
    const updates: Promise<any>[] = []

    for (const docSnap of querySnapshot.docs) {
      const data: any = docSnap.data()
      const msg: string = String(data.message || "")
      const wasCustomerOnly = msg.startsWith("B·∫°n ƒë√£ g·ª≠i h√†ng") || msg.startsWith("B·∫°n ƒë√£ gi·ªØ h√†ng")
      if (wasCustomerOnly && !data.customerId && data.orderId && data.lockerId) {
        // Kh√¥ng th·ªÉ suy lu·∫≠n customerId n·∫øu kh√¥ng l∆∞u; b·ªè qua n·∫øu thi·∫øu
        // Ch·ªâ g·∫Øn c·ªù ri√™ng t∆∞ ƒë·ªÉ admin dropdown kh√¥ng hi·ªÉn th·ªã (fallback)
        const ref = doc(db, "notifications", docSnap.id)
        updates.push(updateDoc(ref, { privateToCustomer: true, lastUpdated: new Date() }))
      }
    }
    await Promise.all(updates)
    console.log("‚úÖ ƒê√£ kh√¥i ph·ª•c ph·∫°m vi hi·ªÉn th·ªã cho th√¥ng b√°o g·ª≠i-h√†ng c·ªßa kh√°ch")
  } catch (e) {
    console.error("L·ªói kh√¥i ph·ª•c th√¥ng b√°o kh√°ch:", e)
  }
}

// Utility: deduplicate lockers by lockerNumber (keep canonical doc id == lockerNumber)
// CH·ªà x·ª≠ l√Ω duplicate, KH√îNG reset d·ªØ li·ªáu hi·ªán c√≥
export async function dedupeLockers(): Promise<{ removed: number }> {
  const snap = await getDocs(collection(db, "lockers"))
  const groups = new Map<string, Array<{ id: string; data: any }>>()
  snap.docs.forEach((d) => {
    const data: any = d.data()
    const key = String((data?.lockerNumber ?? "").toString().trim().toUpperCase())
    if (!groups.has(key)) groups.set(key, [])
    groups.get(key)!.push({ id: d.id, data })
  })

  let removed = 0
  for (const [key, items] of groups.entries()) {
    if (!key || items.length <= 1) continue // Ch·ªâ x·ª≠ l√Ω khi c√≥ duplicate
    
    const canonicalId = key
    // T√¨m document c√≥ ID tr√πng v·ªõi lockerNumber (canonical)
    const keep = items.find((x) => x.id.toUpperCase() === canonicalId) || items[0]
    
    // Ch·ªâ c·∫≠p nh·∫≠t n·∫øu c·∫ßn thi·∫øt, gi·ªØ nguy√™n d·ªØ li·ªáu hi·ªán c√≥
    if (keep.id.toUpperCase() !== canonicalId) {
      await setDoc(doc(db, "lockers", canonicalId), {
        ...keep.data,
        lockerNumber: canonicalId,
        lastUpdated: new Date(),
      })
    }
    
    // X√≥a c√°c duplicate (kh√¥ng ph·∫£i canonical)
    for (const it of items) {
      if (it.id.toUpperCase() !== canonicalId) {
        try {
          await deleteDoc(doc(db, "lockers", it.id))
          removed += 1
          console.log(`üóëÔ∏è X√≥a duplicate t·ªß: ${it.id} (gi·ªØ l·∫°i ${canonicalId})`)
        } catch {}
      }
    }
  }
  return { removed }
}

// ========== C√ÅC H√ÄM ƒê·ªåC D·ªÆ LI·ªÜU ==========

// L·∫•y t·∫•t c·∫£ ng∆∞·ªùi d√πng
export async function getUsers(): Promise<User[]> {
  const querySnapshot = await getDocs(collection(db, "users"));
  return querySnapshot.docs.map(doc => {
    const data = doc.data()
    return { 
      id: doc.id, 
      ...data,
      createdAt: data?.createdAt?.toDate ? data.createdAt.toDate() : data.createdAt || new Date(),
    } as User
  });
}

// T√¨m user theo email (tr·∫£ v·ªÅ k√®m id)
export async function findUserByEmail(email: string): Promise<User | null> {
  const q = query(collection(db, "users"), where("email", "==", email))
  const snap = await getDocs(q)
  if (snap.empty) return null
  const d = snap.docs[0]
  return { id: d.id, ...(d.data() as Omit<User, "id">) } as User
}

// L·∫•y t·∫•t c·∫£ t·ªß th√¥ng minh
export async function getLockers(): Promise<Locker[]> {
  const querySnapshot = await getDocs(collection(db, "lockers"));
  const lockers = querySnapshot.docs
    .map((docSnap) => {
      const data: any = docSnap.data()
      return {
        ...data,
        id: docSnap.id, // ensure Firestore doc id wins over any stored id field
        status: typeof data.status === "string" ? data.status.trim() : data.status,
        lockerNumber: typeof data.lockerNumber === "string" ? data.lockerNumber.trim() : data.lockerNumber,
        lastUpdated: data?.lastUpdated?.toDate ? data.lastUpdated.toDate() : data.lastUpdated,
      } as Locker
    })
    .filter((locker) => locker && locker.lockerNumber) // L·ªçc b·ªè c√°c t·ªß kh√¥ng h·ª£p l·ªá

  // Ki·ªÉm tra v√† t·∫°o l·∫°i t·ªß A1-A6 n·∫øu thi·∫øu
  const requiredLockers = ["A1", "A2", "A3", "A4", "A5", "A6"]
  const existingNumbers = lockers.map(l => l.lockerNumber)
  const missingLockers = requiredLockers.filter(num => !existingNumbers.includes(num))
  
  if (missingLockers.length > 0) {
    console.log(`‚ö†Ô∏è Thi·∫øu ${missingLockers.length} t·ªß, ƒëang t·∫°o l·∫°i...`)
    for (const lockerNumber of missingLockers) {
      try {
        const size = lockerNumber === "A1" || lockerNumber === "A4" ? "small" : 
                   lockerNumber === "A2" || lockerNumber === "A5" ? "medium" : "large"
        await setDoc(doc(db, "lockers", lockerNumber), {
          lockerNumber,
          status: "available",
          size,
          lastUpdated: new Date()
        })
        console.log(`‚úÖ ƒê√£ t·∫°o l·∫°i t·ªß ${lockerNumber}`)
      } catch (error) {
        console.error(`‚ùå L·ªói t·∫°o t·ªß ${lockerNumber}:`, error)
      }
    }
    
    // L·∫•y l·∫°i danh s√°ch t·ªß sau khi t·∫°o
    const newQuerySnapshot = await getDocs(collection(db, "lockers"));
    return newQuerySnapshot.docs
      .map((docSnap) => {
        const data: any = docSnap.data()
        return {
          ...data,
          id: docSnap.id,
          status: typeof data.status === "string" ? data.status.trim() : data.status,
          lockerNumber: typeof data.lockerNumber === "string" ? data.lockerNumber.trim() : data.lockerNumber,
          lastUpdated: data?.lastUpdated?.toDate ? data.lastUpdated.toDate() : data.lastUpdated,
        } as Locker
      })
      .filter((locker) => locker && locker.lockerNumber)
  }

  return lockers
}

// L·∫•y t·∫•t c·∫£ giao d·ªãch
export async function getTransactions(): Promise<Order[]> {
  const q = query(collection(db, "transactions"), orderBy("createdAt", "desc"));
  const querySnapshot = await getDocs(q);
  return querySnapshot.docs.map((docSnap) => {
    const data: any = docSnap.data()
    return {
      id: docSnap.id,
      ...data,
      createdAt: data?.createdAt?.toDate ? data.createdAt.toDate() : data.createdAt,
      deliveredAt: data?.deliveredAt?.toDate ? data.deliveredAt.toDate() : data.deliveredAt,
      pickedUpAt: data?.pickedUpAt?.toDate ? data.pickedUpAt.toDate() : data.pickedUpAt,
    } as Order
  })
}

// L·∫•y giao d·ªãch c·ªßa m·ªôt ng∆∞·ªùi d√πng
export async function getUserTransactions(userId: string): Promise<Order[]> {
  // Remove orderBy to avoid composite index requirement; sort client-side
  const q = query(
    collection(db, "transactions"), 
    where("senderId", "==", userId)
  );
  const querySnapshot = await getDocs(q);
  const items = querySnapshot.docs.map((docSnap) => {
    const data: any = docSnap.data()
    return {
      id: docSnap.id,
      ...data,
      createdAt: data?.createdAt?.toDate ? data.createdAt.toDate() : data.createdAt,
      deliveredAt: data?.deliveredAt?.toDate ? data.deliveredAt.toDate() : data.deliveredAt,
      pickedUpAt: data?.pickedUpAt?.toDate ? data.pickedUpAt.toDate() : data.pickedUpAt,
    } as Order
  })
  return items.sort((a, b) => {
    const ta = (a as any).createdAt?.getTime?.() ?? 0
    const tb = (b as any).createdAt?.getTime?.() ?? 0
    return tb - ta
  })
}

// L·∫•y t·∫•t c·∫£ b√°o l·ªói
export async function getErrorReports(): Promise<ErrorReport[]> {
  const q = query(collection(db, "errors"), orderBy("createdAt", "desc"));
  const querySnapshot = await getDocs(q);
  return querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as ErrorReport));
}

// L·∫•y b√°o l·ªói c·ªßa m·ªôt ng∆∞·ªùi d√πng
export async function getUserErrorReports(userId: string): Promise<ErrorReport[]> {
  // Avoid requiring composite index by removing orderBy in Firestore query
  // and sorting client-side. Also normalize timestamp fields.
  const q = query(
    collection(db, "errors"), 
    where("customerId", "==", userId)
  );
  const querySnapshot = await getDocs(q);
  const items = querySnapshot.docs.map((docSnap) => {
    const data: any = docSnap.data()
    return {
      id: docSnap.id,
      ...data,
      createdAt: data?.createdAt?.toDate ? data.createdAt.toDate() : data.createdAt,
      resolvedAt: data?.resolvedAt?.toDate ? data.resolvedAt.toDate() : data.resolvedAt,
    } as ErrorReport
  })
  return items.sort((a, b) => {
    const ta = (a as any).createdAt?.getTime?.() ?? 0
    const tb = (b as any).createdAt?.getTime?.() ?? 0
    return tb - ta
  })
}

// L·∫•y b√°o l·ªói theo lockerId
export async function getErrorReportsByLockerId(lockerId: string): Promise<ErrorReport[]> {
  const q = query(
    collection(db, "errors"), 
    where("lockerId", "==", lockerId)
  );
  const querySnapshot = await getDocs(q);
  const items = querySnapshot.docs.map((docSnap) => {
    const data: any = docSnap.data()
    return {
      id: docSnap.id,
      ...data,
      createdAt: data?.createdAt?.toDate ? data.createdAt.toDate() : data.createdAt,
      resolvedAt: data?.resolvedAt?.toDate ? data.resolvedAt.toDate() : data.resolvedAt,
      receivedAt: data?.receivedAt?.toDate ? data.receivedAt.toDate() : data.receivedAt,
      processingStartedAt: data?.processingStartedAt?.toDate ? data.processingStartedAt.toDate() : data.processingStartedAt,
      closedAt: data?.closedAt?.toDate ? data.closedAt.toDate() : data.closedAt,
      customerNotifiedAt: data?.customerNotifiedAt?.toDate ? data.customerNotifiedAt.toDate() : data.customerNotifiedAt,
    } as ErrorReport
  })
  return items.sort((a, b) => {
    const ta = (a as any).createdAt?.getTime?.() ?? 0
    const tb = (b as any).createdAt?.getTime?.() ?? 0
    return tb - ta
  })
}

// L·∫•y t·∫•t c·∫£ th√¥ng b√°o
export async function getNotifications(): Promise<Notification[]> {
  const q = query(collection(db, "notifications"), orderBy("createdAt", "desc"));
  const querySnapshot = await getDocs(q);
  return querySnapshot.docs.map((docSnap) => {
    const data: any = docSnap.data()
    return {
      id: docSnap.id,
      ...data,
      createdAt: data?.createdAt?.toDate ? data.createdAt.toDate() : data.createdAt,
    } as Notification
  })
}

// L·∫•y th√¥ng b√°o ch∆∞a ƒë·ªçc
export async function getUnreadNotifications(): Promise<Notification[]> {
  const q = query(
    collection(db, "notifications"), 
    where("isRead", "==", false),
    orderBy("createdAt", "desc")
  );
  const querySnapshot = await getDocs(q);
  return querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as Notification));
}

// ========== C√ÅC H√ÄM C·∫¨P NH·∫¨T D·ªÆ LI·ªÜU ==========

// C·∫≠p nh·∫≠t th·ªùi gian t·ªß (ch·ªâ c·∫≠p nh·∫≠t lastUpdated)
export async function updateLockerTimestamp(lockerId: string) {
  const lockerRef = doc(db, "lockers", lockerId);
  await updateDoc(lockerRef, { 
    lastUpdated: new Date() 
  });
  console.log(`üïê C·∫≠p nh·∫≠t th·ªùi gian t·ªß ${lockerId}`);
}

// C·∫≠p nh·∫≠t tr·∫°ng th√°i t·ªß - CH·ªà c·∫≠p nh·∫≠t tr·∫°ng th√°i, KH√îNG reset d·ªØ li·ªáu
export async function updateLockerStatus(lockerId: string, status: string, orderId?: string) {
  const lockerRef = doc(db, "lockers", lockerId);
  const updateData: any = { 
    status, 
    lastUpdated: new Date() 
  };
  
  // Ch·ªâ c·∫≠p nh·∫≠t currentOrderId n·∫øu ƒë∆∞·ª£c cung c·∫•p
  if (orderId !== undefined) {
    updateData.currentOrderId = orderId;
  } else if (status === "available") {
    // Khi t·ªß tr·ªü v·ªÅ tr·∫°ng th√°i available, x√≥a currentOrderId
    updateData.currentOrderId = null;
  }
  
  await updateDoc(lockerRef, updateData);
  console.log(`‚úÖ C·∫≠p nh·∫≠t t·ªß ${lockerId}: ${status}${orderId ? ` (Order: ${orderId})` : ''}`);
}

// C·∫≠p nh·∫≠t tr·∫°ng th√°i giao d·ªãch
export async function updateTransactionStatus(transactionId: string, status: string) {
  const transactionRef = doc(db, "transactions", transactionId);
  const updateData: any = { status };
  
  if (status === "picked_up") {
    updateData.pickedUpAt = new Date();
  }
  
  await updateDoc(transactionRef, updateData);
}

// X·ª≠ l√Ω nh·∫≠n h√†ng - c·∫≠p nh·∫≠t transaction v√† reset t·ªß
export async function pickupPackage(transactionId: string) {
  try {
    // L·∫•y th√¥ng tin transaction ƒë·ªÉ bi·∫øt lockerId
    const transactionRef = doc(db, "transactions", transactionId);
    const transactionSnap = await getDoc(transactionRef);
    
    if (!transactionSnap.exists()) {
      throw new Error("Kh√¥ng t√¨m th·∫•y giao d·ªãch");
    }
    
    const transactionData = transactionSnap.data();
    const lockerId = transactionData.lockerId;
    
    // C·∫≠p nh·∫≠t transaction status th√†nh picked_up
    await updateTransactionStatus(transactionId, "picked_up");
    
    // Reset t·ªß v·ªÅ tr·∫°ng th√°i available v√† x√≥a t·∫•t c·∫£ th√¥ng tin li√™n quan
    const lockerRef = doc(db, "lockers", lockerId);
    await updateDoc(lockerRef, {
      status: "available",
      currentOrderId: null,
      lastUpdated: new Date()
    });
    
    console.log(`‚úÖ ƒê√£ x·ª≠ l√Ω nh·∫≠n h√†ng: Transaction ${transactionId}, Locker ${lockerId} ƒë√£ ƒë∆∞·ª£c reset ho√†n to√†n`);
    
    return { success: true };
  } catch (error) {
    console.error("L·ªói khi x·ª≠ l√Ω nh·∫≠n h√†ng:", error);
    throw error;
  }
}

// ƒê√°nh d·∫•u th√¥ng b√°o ƒë√£ ƒë·ªçc
export async function markNotificationAsRead(notificationId: string) {
  const notificationRef = doc(db, "notifications", notificationId);
  await updateDoc(notificationRef, { isRead: true });
}

// ƒê√°nh d·∫•u t·∫•t c·∫£ th√¥ng b√°o c·ªßa kh√°ch h√†ng ƒë√£ ƒë·ªçc
export async function markAllNotificationsAsRead(customerId: string) {
  try {
    const notificationsRef = collection(db, "notifications");
    const q = query(notificationsRef, where("customerId", "==", customerId), where("isRead", "==", false));
    const querySnapshot = await getDocs(q);
    
    const batch = writeBatch(db);
    querySnapshot.docs.forEach((doc) => {
      batch.update(doc.ref, { isRead: true });
    });
    
    await batch.commit();
    console.log(`‚úÖ ƒê√£ ƒë√°nh d·∫•u t·∫•t c·∫£ th√¥ng b√°o ƒë√£ ƒë·ªçc cho customer ${customerId}`);
  } catch (error) {
    console.error("L·ªói ƒë√°nh d·∫•u t·∫•t c·∫£ th√¥ng b√°o ƒë√£ ƒë·ªçc:", error);
    throw error;
  }
}

// ƒê√°nh d·∫•u t·∫•t c·∫£ th√¥ng b√°o h·ªá th·ªëng (d√†nh cho admin) l√† ƒë√£ ƒë·ªçc
export async function markAllAdminNotificationsAsRead() {
  try {
    const notificationsRef = collection(db, "notifications")
    // Ch·ªâ l·∫•y th√¥ng b√°o ch∆∞a ƒë·ªçc v√† kh√¥ng g·∫Øn customerId (system notifications)
    const q = query(notificationsRef, where("isRead", "==", false), where("customerId", "==", null))
    const snap = await getDocs(q)

    if (snap.empty) return

    const batch = writeBatch(db)
    snap.docs.forEach((d) => {
      batch.update(d.ref, { isRead: true })
    })
    await batch.commit()
    console.log(`‚úÖ ƒê√£ ƒë√°nh d·∫•u ${snap.size} th√¥ng b√°o h·ªá th·ªëng l√† ƒë√£ ƒë·ªçc`)
  } catch (e) {
    console.error("L·ªói ƒë√°nh d·∫•u t·∫•t c·∫£ th√¥ng b√°o h·ªá th·ªëng ƒë√£ ƒë·ªçc:", e)
    throw e
  }
}

// C·∫≠p nh·∫≠t tr·∫°ng th√°i ng∆∞·ªùi d√πng
export async function updateUserStatus(userId: string, isActive: boolean) {
  try {
    const userRef = doc(db, "users", userId)
    await updateDoc(userRef, {
      isActive: isActive,
      lastUpdated: new Date()
    })
    console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i ng∆∞·ªùi d√πng ${userId}: ${isActive ? 'K√≠ch ho·∫°t' : 'V√¥ hi·ªáu h√≥a'}`)
  } catch (error) {
    console.error("L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i ng∆∞·ªùi d√πng:", error)
    throw error
  }
}

// C·∫≠p nh·∫≠t l·∫ßn ƒëƒÉng nh·∫≠p cu·ªëi
export async function updateLastLogin(userId: string) {
  try {
    const userRef = doc(db, "users", userId)
    await updateDoc(userRef, {
      lastLoginAt: new Date(),
      lastUpdated: new Date()
    })
    console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t l·∫ßn ƒëƒÉng nh·∫≠p cu·ªëi cho user ${userId}`)
  } catch (error) {
    console.error("L·ªói c·∫≠p nh·∫≠t l·∫ßn ƒëƒÉng nh·∫≠p cu·ªëi:", error)
    throw error
  }
}

// C·∫≠p nh·∫≠t l·∫ßn truy c·∫≠p cu·ªëi (khi user tho√°t browser)
export async function updateLastAccess(userId: string) {
  try {
    const userRef = doc(db, "users", userId)
    await updateDoc(userRef, {
      lastAccessAt: new Date(),
      lastUpdated: new Date()
    })
    console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t l·∫ßn truy c·∫≠p cu·ªëi cho user ${userId}`)
  } catch (error) {
    console.error("L·ªói c·∫≠p nh·∫≠t l·∫ßn truy c·∫≠p cu·ªëi:", error)
    throw error
  }
}

// C·∫≠p nh·∫≠t d·ªØ li·ªáu ng∆∞·ªùi d√πng c≈© (th√™m createdAt v√† lastLoginAt n·∫øu ch∆∞a c√≥)
export async function updateLegacyUsers() {
  try {
    const users = await getUsers()
    const usersToUpdate = users.filter(user => 
      !user.createdAt || 
      user.createdAt.toString() === 'Invalid Date' ||
      !user.lastLoginAt
    )
    
    if (usersToUpdate.length === 0) {
      console.log("‚úÖ T·∫•t c·∫£ ng∆∞·ªùi d√πng ƒë√£ c√≥ ƒë·∫ßy ƒë·ªß d·ªØ li·ªáu")
      return
    }
    
    const updatePromises = usersToUpdate.map(user => {
      const userRef = doc(db, "users", user.id)
      const updateData: any = {
        lastUpdated: new Date()
      }
      
      // Th√™m createdAt n·∫øu ch∆∞a c√≥
      if (!user.createdAt || user.createdAt.toString() === 'Invalid Date') {
        updateData.createdAt = new Date("2025-01-01") // Ng√†y m·∫∑c ƒë·ªãnh cho d·ªØ li·ªáu c≈©
      }
      
      // Th√™m lastLoginAt n·∫øu ch∆∞a c√≥ (ƒë·∫∑t b·∫±ng createdAt ho·∫∑c ng√†y hi·ªán t·∫°i)
      if (!user.lastLoginAt) {
        updateData.lastLoginAt = user.createdAt && user.createdAt.toString() !== 'Invalid Date' 
          ? user.createdAt 
          : new Date("2025-01-01")
      }
      
      return updateDoc(userRef, updateData)
    })
    
    await Promise.all(updatePromises)
    console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t d·ªØ li·ªáu cho ${usersToUpdate.length} ng∆∞·ªùi d√πng`)
  } catch (error) {
    console.error("L·ªói c·∫≠p nh·∫≠t d·ªØ li·ªáu ng∆∞·ªùi d√πng c≈©:", error)
  }
}

// ========== X·ª¨ L√ù L·ªñI V·ªöI QUY TR√åNH HO√ÄN CH·ªàNH ==========

// Ti·∫øp nh·∫≠n l·ªói (chuy·ªÉn t·ª´ pending ‚Üí received)
export async function receiveErrorReport(errorId: string, adminNotes?: string) {
  const errorRef = doc(db, "errors", errorId);
  await updateDoc(errorRef, {
    status: "received",
    processingStage: "received",
    receivedAt: new Date(),
    adminNotes: adminNotes || "",
    lastUpdated: new Date()
  });
  console.log(`‚úÖ ƒê√£ ti·∫øp nh·∫≠n l·ªói: ${errorId}`);
}

// B·∫Øt ƒë·∫ßu x·ª≠ l√Ω l·ªói (chuy·ªÉn t·ª´ received ‚Üí processing)
export async function startProcessingError(errorId: string, adminNotes?: string) {
  const errorRef = doc(db, "errors", errorId);
  
  // L·∫•y th√¥ng tin l·ªói ƒë·ªÉ bi·∫øt lockerId
  const errorSnap = await getDoc(errorRef);
  if (!errorSnap.exists()) {
    throw new Error("Kh√¥ng t√¨m th·∫•y b√°o l·ªói");
  }
  
  const errorData = errorSnap.data();
  const lockerId = errorData.lockerId;
  
  // C·∫≠p nh·∫≠t tr·∫°ng th√°i l·ªói
  await updateDoc(errorRef, {
    status: "processing",
    processingStage: "processing",
    processingStartedAt: new Date(),
    adminNotes: adminNotes || "",
    lastUpdated: new Date()
  });
  
  // C·∫≠p nh·∫≠t tr·∫°ng th√°i t·ªß th√†nh maintenance n·∫øu c√≥ lockerId
  if (lockerId) {
    await updateLockerStatus(lockerId, "maintenance");
    console.log(`üîß ƒê√£ ƒë·∫∑t t·ªß ${lockerId} v√†o ch·∫ø ƒë·ªô b·∫£o tr√¨`);
  }
  
  console.log(`üîß ƒê√£ b·∫Øt ƒë·∫ßu x·ª≠ l√Ω l·ªói: ${errorId}`);
}

// Ho√†n th√†nh x·ª≠ l√Ω l·ªói (chuy·ªÉn t·ª´ processing ‚Üí resolved)
export async function resolveErrorReport(errorId: string, adminNotes?: string) {
  const errorRef = doc(db, "errors", errorId);
  
  // L·∫•y th√¥ng tin l·ªói ƒë·ªÉ bi·∫øt lockerId
  const errorSnap = await getDoc(errorRef);
  if (!errorSnap.exists()) {
    throw new Error("Kh√¥ng t√¨m th·∫•y b√°o l·ªói");
  }
  
  const errorData = errorSnap.data();
  const lockerId = errorData.lockerId;
  
  // C·∫≠p nh·∫≠t tr·∫°ng th√°i l·ªói
  await updateDoc(errorRef, {
    status: "resolved",
    processingStage: "resolved",
    resolvedAt: new Date(),
    adminNotes: adminNotes || "",
    lastUpdated: new Date()
  });
  
  // C·∫≠p nh·∫≠t tr·∫°ng th√°i t·ªß sau khi x·ª≠ l√Ω l·ªói:
  // - N·∫øu t·ªß v·∫´n ƒëang c√≥ ƒë∆°n (currentOrderId t·ªìn t·∫°i) ‚Üí ƒë·ªÉ l·∫°i tr·∫°ng th√°i "occupied"
  // - Ng∆∞·ª£c l·∫°i ‚Üí ƒë∆∞a v·ªÅ "available"
  if (lockerId) {
    try {
      const lockerRef = doc(db, "lockers", lockerId)
      const lockerSnap = await getDoc(lockerRef)
      const lockerData: any = lockerSnap.exists() ? lockerSnap.data() : null
      const hasActiveOrder = !!(lockerData && lockerData.currentOrderId)
      if (hasActiveOrder) {
        await updateLockerStatus(lockerId, "occupied")
        console.log(`‚úÖ T·ªß ${lockerId} c√≤n ƒë∆°n ƒëang g·ª≠i, gi·ªØ tr·∫°ng th√°i occupied`)
      } else {
        await updateLockerStatus(lockerId, "available")
        console.log(`‚úÖ T·ªß ${lockerId} kh√¥ng c√≤n ƒë∆°n, ƒë∆∞a v·ªÅ tr·∫°ng th√°i available`)
      }
    } catch (e) {
      // N·∫øu c√≥ l·ªói khi ƒë·ªçc t·ªß, fallback an to√†n: KH√îNG x√≥a d·ªØ li·ªáu ƒë∆°n
      await updateLockerStatus(lockerId, "occupied")
      console.warn(`‚ö†Ô∏è Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c d·ªØ li·ªáu t·ªß ${lockerId}, t·∫°m gi·ªØ occupied ƒë·ªÉ tr√°nh m·∫•t d·ªØ li·ªáu`)
    }
  }
  
  console.log(`‚úÖ ƒê√£ ho√†n th√†nh x·ª≠ l√Ω l·ªói: ${errorId}`);
}

// Th√¥ng b√°o kh√°ch h√†ng (chuy·ªÉn t·ª´ resolved ‚Üí notified)
export async function notifyCustomerAboutErrorResolution(errorId: string, customerId: string) {
  try {
    // L·∫•y th√¥ng tin error report ƒë·ªÉ l·∫•y lockerId
    const errorDoc = await getDoc(doc(db, "errors", errorId));
    const errorData = errorDoc.data();
    
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i l·ªói
    const errorRef = doc(db, "errors", errorId);
    await updateDoc(errorRef, {
      processingStage: "notified",
      customerNotifiedAt: new Date(),
      lastUpdated: new Date()
    });

    // T·∫°o th√¥ng b√°o cho kh√°ch h√†ng v·ªõi th√¥ng tin li√™n k·∫øt
    const customerNotification = {
      type: "info" as const,
      message: "L·ªói b·∫°n b√°o c√°o ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng. C·∫£m ∆°n b·∫°n ƒë√£ ph·∫£n h·ªìi!",
      customerId: customerId,
      errorId: errorId, // Th√™m errorId ƒë·ªÉ li√™n k·∫øt
      lockerId: errorData?.lockerId, // Th√™m lockerId t·ª´ error report
      isRead: false,
      createdAt: new Date(),
    };
    
    await saveNotification(customerNotification);
    console.log(`üì¢ ƒê√£ th√¥ng b√°o kh√°ch h√†ng v·ªÅ vi·ªác x·ª≠ l√Ω l·ªói: ${errorId}`);
  } catch (error) {
    console.error("L·ªói th√¥ng b√°o kh√°ch h√†ng:", error);
    throw error;
  }
}

// ƒê√≥ng l·ªói (chuy·ªÉn t·ª´ notified ‚Üí closed)
export async function closeErrorReport(errorId: string) {
  const errorRef = doc(db, "errors", errorId);
  await updateDoc(errorRef, {
    status: "closed",
    processingStage: "notified",
    closedAt: new Date(),
    lastUpdated: new Date()
  });
  console.log(`üîí ƒê√£ ƒë√≥ng l·ªói: ${errorId}`);
}

// X·ª≠ l√Ω th√¥ng b√°o l·ªói - c·∫≠p nh·∫≠t tr·∫°ng th√°i v√† t·∫°o th√¥ng b√°o cho kh√°ch h√†ng
export async function handleErrorNotification(notificationId: string, errorId: string, customerId: string) {
  try {
    // L·∫•y th√¥ng tin error report ƒë·ªÉ l·∫•y lockerId
    const errorDoc = await getDoc(doc(db, "errors", errorId));
    const errorData = errorDoc.data();
    
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i b√°o l·ªói th√†nh ƒë√£ x·ª≠ l√Ω
    await resolveErrorReport(errorId, "ƒê√£ x·ª≠ l√Ω l·ªói t·ª´ admin");
    
    // ƒê√°nh d·∫•u th√¥ng b√°o ƒë√£ ƒë·ªçc
    await markNotificationAsRead(notificationId);
    
    // T·∫°o th√¥ng b√°o cho kh√°ch h√†ng v·ªõi th√¥ng tin li√™n k·∫øt
    const customerNotification = {
      type: "info" as const,
      message: "L·ªói b·∫°n b√°o c√°o ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng. C·∫£m ∆°n b·∫°n ƒë√£ ph·∫£n h·ªìi!",
      customerId: customerId,
      errorId: errorId, // Th√™m errorId ƒë·ªÉ li√™n k·∫øt
      lockerId: errorData?.lockerId, // Th√™m lockerId t·ª´ error report
      isRead: false,
      createdAt: new Date(),
    };
    
    await saveNotification(customerNotification);
    
    console.log(`‚úÖ ƒê√£ x·ª≠ l√Ω th√¥ng b√°o l·ªói: ${notificationId}, Error: ${errorId}`);
    return { success: true };
  } catch (error) {
    console.error("L·ªói khi x·ª≠ l√Ω th√¥ng b√°o l·ªói:", error);
    throw error;
  }
}
