"use client"

import { useEffect } from "react"
import { updateLockerTimestamp } from "@/lib/firestore-actions"

export function LockerAutoUpdater() {
  useEffect(() => {
    // C·∫≠p nh·∫≠t th·ªùi gian t·ªß m·ªói 5 ph√∫t (300000ms)
    const interval = setInterval(async () => {
      try {
        // L·∫•y danh s√°ch t·∫•t c·∫£ t·ªß v√† c·∫≠p nh·∫≠t th·ªùi gian
        const { getLockers } = await import("@/lib/firestore-actions")
        const lockers = await getLockers()
        
        // C·∫≠p nh·∫≠t th·ªùi gian cho t·∫•t c·∫£ t·ªß
        const updatePromises = lockers.map(locker => 
          updateLockerTimestamp(locker.id).catch(error => 
            console.error(`L·ªói c·∫≠p nh·∫≠t t·ªß ${locker.id}:`, error)
          )
        )
        
        await Promise.all(updatePromises)
        console.log(`üïê ƒê√£ c·∫≠p nh·∫≠t th·ªùi gian cho ${lockers.length} t·ªß`)
      } catch (error) {
        console.error("L·ªói c·∫≠p nh·∫≠t th·ªùi gian t·ªß:", error)
      }
    }, 5 * 60 * 1000) // 5 ph√∫t

    // C·∫≠p nh·∫≠t ngay l·∫≠p t·ª©c khi component mount
    const initialUpdate = async () => {
      try {
        const { getLockers } = await import("@/lib/firestore-actions")
        const lockers = await getLockers()
        
        const updatePromises = lockers.map(locker => 
          updateLockerTimestamp(locker.id).catch(error => 
            console.error(`L·ªói c·∫≠p nh·∫≠t t·ªß ${locker.id}:`, error)
          )
        )
        
        await Promise.all(updatePromises)
        console.log(`üïê C·∫≠p nh·∫≠t th·ªùi gian ban ƒë·∫ßu cho ${lockers.length} t·ªß`)
      } catch (error) {
        console.error("L·ªói c·∫≠p nh·∫≠t th·ªùi gian t·ªß ban ƒë·∫ßu:", error)
      }
    }
    
    initialUpdate()

    return () => clearInterval(interval)
  }, [])

  return null // Component kh√¥ng render g√¨
}
